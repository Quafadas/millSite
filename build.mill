//| mill-version: 1.0.0-RC1-jvm
//| mill-jvm-version: 21
//| repositories: [https://packages.schroders.com/artifactory/maven]

import mill.util.BuildInfo.{millVersion, millBinPlatform}

import mill.{Agg, PathRef, T}
import mill.*
import mill.scalalib.*
import mill.scalalib.publish.*
import mill.api.Result
import mill.util.Jvm.createJar
import mill.define.Task.Simple.create

// mill mill.bsp.BSP/install
// mill __.compiledClassesAndSemanticDbFiles
object plugin extends ScalaModule with PublishModule:
  def platformSuffix = s"_mill$millBinPlatform"

  def scalaVersion = "3.7.0"

  def scalaArtefactVersion: Task[String] =
    scalaVersion.map(_.split("\\.").take(2).mkString("."))

  override def artifactName = "millSite"

  // override def compileMvnDeps = Seq(
  //   mvn"com.lihaoyi::mill-libs-main::$millVersion",
  //   mvn"com.lihaoyi::mill-libs-scalalib::$millVersion",
  //   mvn"com.lihaoyi::mill-libs-scalajslib::$millVersion"
  // )

  def mvnDeps = Task {
    Seq(
      mvn"com.lihaoyi::mill-libs:$millVersion"
      // mvn"io.github.quafadas::sjsls:0.2.5"
    )
  }

  def artifactSuffix = s"${platformSuffix()}_${scalaArtefactVersion()}"

  // def publishVersion = VcsVersion.vcsState().format()
  def publishVersion = "DONTUSEME"

  override def pomSettings = Task {
    PomSettings(
      description = "Mill plugin for mdoc, static site generation",
      organization = "io.github.quafadas",
      url = "https://github.com/Quafadas/millSite",
      licenses = Seq(License.`Apache-2.0`),
      versionControl = VersionControl.github("quafadas", "millSite"),
      developers = Seq(
        Developer("quafadas", "Simon Parten", "https://github.com/quafadas")
      )
    )
  }

  object test extends ScalaTests with TestModule.Utest:
    def mvnDeps = Seq(mvn"com.lihaoyi::mill-libs-testrunner::${millVersion()}")

    def forkEnv = Map(
      "MILL_EXECUTABLE_PATH" -> millExecutable.assembly().path.toString
    )

    object millExecutable extends JavaModule:
      def mvnDeps = Seq(mvn"com.lihaoyi::mill-libs::${millVersion()}")
      def mainClass = Some("mill.runner.client.MillClientMain")
      def resources = Task {
        val p =
          Task.dest / "mill/local-test-overrides" / s"com.lihaoyi-${plugin.artifactId()}"
        os.write(
          p,
          plugin.localClasspath().map(_.path).mkString("\n"),
          createFolders = true
        )
        Seq(PathRef(Task.dest))
      }
    end millExecutable
  end test
end plugin

// object itest extends MillIntegrationTestModule {
//   def millTestVersion = plugin.millVersion()
//   def pluginsUnderTest = Seq(plugin)
// }

object site extends ScalaModule:
  // def latestVersion: T[String] = Task {
  //   VcsVersion.vcsState().lastTag.getOrElse("0.0.0").replace("v", "")
  // }

  def scalaVersion: T[String] = "3.7.0"

  def sitePath: T[os.Path] = Task(docJar().path / os.up / "javadoc")

  def sitePathString: T[String] = Task(sitePath().toString())

  override def scalaDocOptions = Task {

    super.scalaDocOptions() ++ Seq(
      // "-project-version",
      // TODO: Bring back
      // latestVersion(),
      s"-social-links:github::${plugin.pomSettings().url}"
    )
  }

  def serveLocal() = Task.Command {
    os.proc(
      "npm",
      "browser-sync",
      "start",
      "--server",
      "--ss",
      sitePathString(),
      "-w"
    ).call(stdout = os.Inherit)
  }
end site
