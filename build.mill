// mill plugins
import $ivy.`de.tototec::de.tobiasroeser.mill.vcs.version::0.4.0`
// Run integration tests with mill
import $ivy.`de.tototec::de.tobiasroeser.mill.integrationtest::0.7.1`

import de.tobiasroeser.mill.integrationtest._
import de.tobiasroeser.mill.vcs.version._
import mill.{Agg, PathRef, T}
import mill.define.{Cross, Module, Target}
import mill.modules.Util
import mill._
import mill.scalalib._
import mill.scalalib.publish._
import mill.api.Result
import mill.util.Jvm.createJar

import mill.main.BuildInfo.millVersion

object plugin extends ScalaModule with PublishModule {

  def millPlatform: T[String] = "0.12"

  def millVersion: T[String] = "0.12.0"

  def scalaVersion: T[String] = "2.13.14"

  def scalaArtefactVersion: T[String] =
    scalaVersion.map(_.split("\\.").take(2).mkString("."))

  override def artifactName = "millSite"

  override def compileIvyDeps = Agg(
    ivy"com.lihaoyi::mill-main:${millVersion()}",
    ivy"com.lihaoyi::mill-scalalib:${millVersion()}",
    ivy"com.lihaoyi::mill-scalajslib:${millVersion()}"
  )

  def ivyDeps = Agg(
    ivy"de.tototec:de.tobiasroeser.mill.vcs.version_mill0.11_2.13:0.4.0",
    ivy"com.lihaoyi:mill-dist:${millVersion()}"
  )

  def artifactSuffix = s"_mill${millPlatform()}_${scalaArtefactVersion()}"

  def publishVersion = VcsVersion.vcsState().format()

  override def pomSettings = T {
    PomSettings(
      description = "Mill plugin for mdoc, static site generation",
      organization = "io.github.quafadas",
      url = "https://github.com/Quafadas/millSite",
      licenses = Seq(License.`Apache-2.0`),
      versionControl = VersionControl.github("quafadas", "millSite"),
      developers = Seq(
        Developer("quafadas", "Simon Parten", "https://github.com/quafadas")
      )
    )
  }

  object test extends ScalaTests with TestModule.Utest {
    def ivyDeps = Agg(ivy"com.lihaoyi::mill-testkit:${millVersion()}")
    def forkEnv = Map("MILL_EXECUTABLE_PATH" -> millExecutable.assembly().path.toString)

    object millExecutable extends JavaModule{
      def ivyDeps = Agg(ivy"com.lihaoyi:mill-dist:${millVersion()}")
      def mainClass = Some("mill.runner.client.MillClientMain")
      def resources = Task {
        val p = Task.dest / "mill/local-test-overrides" / s"com.lihaoyi-${plugin.artifactId()}"
        os.write(p, plugin.localClasspath().map(_.path).mkString("\n"), createFolders = true)
        Seq(PathRef(Task.dest))
      }
    }
  }
}

object itest extends MillIntegrationTestModule {
  def millTestVersion = plugin.millVersion()
  def pluginsUnderTest = Seq(plugin)
}

object site extends ScalaModule {
  def latestVersion: T[String] = T {
    VcsVersion.vcsState().lastTag.getOrElse("0.0.0").replace("v", "")
  }

  def scalaVersion: T[String] = "3.3.3"

  def sitePath: T[os.Path] = T { docJar().path / os.up / "javadoc" }

  def sitePathString: T[String] = T { sitePath().toString() }

  override def scalaDocOptions = T {

    super.scalaDocOptions() ++ Seq(
      "-project-version",
      latestVersion(),
      s"-social-links:github::${plugin.pomSettings().url}"
    )
  }

  def serveLocal() = T.command {
    os.proc(
      "npm",
      "browser-sync",
      "start",
      "--server",
      "--ss",
      sitePathString(),
      "-w"
    ).call(stdout = os.Inherit)
  }

}
