//| mill-version: 1.0.3
//| mill-jvm-version: 21
//| mvnDeps:
//| - io.github.quafadas:millSite_mill1_3.7:0.0.50

import mill.util.BuildInfo.{millVersion, millBinPlatform}
import mill.util.VcsVersion

import mill.{PathRef, T}
import mill.*
import mill.scalalib.*
import mill.scalalib.publish.*

import mill.api.Result

import mill.util.Jvm.createJar
import mill.api.Task.Simple
import java.nio.file.Path
import com.sun.net.httpserver.SimpleFileServer
import com.sun.net.httpserver.SimpleFileServer.OutputLevel
import java.net.InetSocketAddress
import mill.util.VcsVersion

// mill mill.bsp.BSP/install
// mill __.compiledClassesAndSemanticDbFiles
object plugin extends ScalaModule with PublishModule:
  def platformSuffix = s"_mill$millBinPlatform"

  def scalaVersion = "3.7.2"

  def scalaArtefactVersion: Task[String] =
    scalaVersion.map(_.split("\\.").take(2).mkString("."))

  override def artifactName = "millSite"

  def mvnDeps = Task{
    super.mvnDeps() ++
    Seq(
      mvn"com.lihaoyi::mill-libs:$millVersion",
      mvn"org.typelevel::laika-io:1.3.2",
      mvn"io.github.quafadas::sjsls:0.2.11",
    )
  }

  def artifactSuffix = s"${platformSuffix()}_${scalaArtefactVersion()}"

  def publishVersion = VcsVersion.vcsState().format()
  // def publishVersion = "DONTUSEME"

  override def pomSettings = Task {
    PomSettings(
      description = "Mill plugin for mdoc, static site generation",
      organization = "io.github.quafadas",
      url = "https://github.com/Quafadas/millSite",
      licenses = Seq(License.`Apache-2.0`),
      versionControl = VersionControl.github("quafadas", "millSite"),
      developers = Seq(
        Developer("quafadas", "Simon Parten", "https://github.com/quafadas")
      )
    )
  }

  object unit extends ScalaTests with TestModule.Utest:
    override def moduleDeps: Seq[JavaModule] = Seq(plugin)
    def mvnDeps = Seq(
      mvn"com.lihaoyi::mill-testkit::${millVersion}",
      mvn"com.lihaoyi::upickle::4.1.0"
    )
end plugin


object site extends io.github.quafadas.millSite.SiteModule:
  def latestVersion: T[String] = Task {
    VcsVersion.vcsState().lastTag.getOrElse("0.0.0").replace("v", "")
  }

  override def unidocTitle = Task("Mill Site API Documentation")

  def unidocDeps: Seq[JavaModule] = Seq(plugin)

  // override def scalaDocOptions = Task {

  //   super.scalaDocOptions() ++ Seq(
  //     // "-project-version",
  //     // TODO: Bring back
  //     // latestVersion(),
  //     s"-social-links:github::${plugin.pomSettings().url}"
  //   )
  // }

end site
