//| mill-version: 1.0.3
//| mill-jvm-version: 21
// //| mvnDeps:
// //|   - io.github.quafadas::millSite::0.0.41-5-e9cfe1-DIRTYb4e16fea

import mill.util.BuildInfo.{millVersion, millBinPlatform}
import mill.util.VcsVersion

import mill.{PathRef, T}
import mill.*
import mill.scalalib.*
import mill.scalalib.publish.*

import mill.api.Result

import mill.util.Jvm.createJar

// mill mill.bsp.BSP/install
// mill __.compiledClassesAndSemanticDbFiles
object plugin extends ScalaModule with PublishModule:
  def platformSuffix = s"_mill$millBinPlatform"

  def scalaVersion = "3.7.2"

  def scalaArtefactVersion: Task[String] =
    scalaVersion.map(_.split("\\.").take(2).mkString("."))

  override def artifactName = "millSite"

  // override def compileMvnDeps = Seq(
  //   mvn"com.lihaoyi::mill-libs-main::$millVersion",
  //   mvn"com.lihaoyi::mill-libs-scalalib::$millVersion",
  //   mvn"com.lihaoyi::mill-libs-scalajslib::$millVersion"
  // )

  def mvnDeps = Task {
    Seq(
      mvn"com.lihaoyi::mill-libs:$millVersion",
      // mvn"io.github.quafadas::sjsls:0.2.5"
      mvn"org.typelevel::laika-io:1.3.2",
      mvn"io.github.quafadas::sjsls:0.2.11",
      mvn"org.scalameta::mdoc:2.7.2",
      mvn"org.scala-lang::scala3-compiler:${scalaVersion()}",
      mvn"org.scala-lang::scala3-library:${scalaVersion()}",
      mvn"org.scala-lang::tasty-core:${scalaVersion()}",
    )
  }

  def artifactSuffix = s"${platformSuffix()}_${scalaArtefactVersion()}"

  def publishVersion = VcsVersion.vcsState().format()
  // def publishVersion = "DONTUSEME"

  override def pomSettings = Task {
    PomSettings(
      description = "Mill plugin for mdoc, static site generation",
      organization = "io.github.quafadas",
      url = "https://github.com/Quafadas/millSite",
      licenses = Seq(License.`Apache-2.0`),
      versionControl = VersionControl.github("quafadas", "millSite"),
      developers = Seq(
        Developer("quafadas", "Simon Parten", "https://github.com/quafadas")
      )
    )
  }

  object unit extends ScalaTests with TestModule.Utest:
    override def moduleDeps: Seq[JavaModule] = Seq(plugin)
    def mvnDeps = Seq(
      mvn"com.lihaoyi::mill-testkit::${millVersion}",
      mvn"com.lihaoyi::upickle::4.1.0"
    )

  // object test extends ScalaTests, TestModule.Utest:
  //   def mvnDeps = Seq(
  //     mvn"com.lihaoyi::mill-testkit::${millVersion}",
  //     mvn"com.lihaoyi::upickle::4.1.0"
  //   )

  //   def forkEnv = Task {
  //     Map(
  //       "MILL_EXECUTABLE_PATH" -> millExecutable.assembly().path.toString,
  //       "MILL_USER_TEST_REPO" -> publishLocalTestRepo().path.toString
  //     )
  //   }

  //   object millExecutable extends JavaModule:
  //     def mvnDeps = Seq(mvn"com.lihaoyi:mill-runner-launcher_3:$millVersion")
  //     def mainClass = Some("mill.launcher.MillLauncherMain")
  //   end millExecutable
  // end test
end plugin

// object itest extends MillIntegrationTestModule {
//   def millTestVersion = plugin.millVersion()
//   def pluginsUnderTest = Seq(plugin)
// }

object site extends ScalaModule:
  // def latestVersion: T[String] = Task {
  //   VcsVersion.vcsState().lastTag.getOrElse("0.0.0").replace("v", "")
  // }

  def scalaVersion: T[String] = "3.7.0"

  def sitePath: T[os.Path] = Task(docJar().path / os.up / "javadoc")

  def sitePathString: T[String] = Task(sitePath().toString())

  override def scalaDocOptions = Task {

    super.scalaDocOptions() ++ Seq(
      // "-project-version",
      // TODO: Bring back
      // latestVersion(),
      s"-social-links:github::${plugin.pomSettings().url}"
    )
  }

  def serveLocal() = Task.Command {
    os.proc(
      "npm",
      "browser-sync",
      "start",
      "--server",
      "--ss",
      sitePathString(),
      "-w"
    ).call(stdout = os.Inherit)
  }
end site
